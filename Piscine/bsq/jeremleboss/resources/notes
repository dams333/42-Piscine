--------------- Etape BSQ ------------------
- Il va falloir recuperer la/les map(s)
	-> Entree standard ou un ou plusieurs fichiers
	-> Si le fichier existe pas => Map error ?\n
	-> Boucler sur chaque map et go parsing

- Parsing de la map
	-> Lire la premiere ligne (la ou y'a toutes les infos)
		-> Check si on n'a pas 2 fois le meme caractere
		-> Check si [0-9]*.{3} (3 caracteres imprimable)
		-> Gaffe au fait que les indicateurs peuvent etre des nombres
			-> Partir de la fin ?
	-> Check si la longueur est plus grande que 0 (qu'on aie au moins un point)
	-> Check la longueur de toutes les lignes
	-> Check si y'a pas d'autres caracteres que empty et obstacle
	-> Verifier qu'il y a le meme nombre de ligne que dans la consigne
	-> Check si la map est full
		-> Afficher la meme map ou map error

- Analyse de la map => Param(Tableau a 2 dimensions sur une seule ligne (tab[y*p + x]))
	-> But : trouver le plus grand carre sans obstacles
		-> On cree une 2e map d'int (obstacle = 0, empty = -1)
		-> Le nombre represente le plus grand carre possible,
			en considerant le point comme etant celui en bas a droite du carre
		-> On parcourt toutes les cases ligne par ligne
			-> Si case empty
				-> Si x == 0 || y == 0
					-> case = 1
				-> Sinon
					-> On recupere les 3 cases au dessus a gauche
					-> On recupere la plus petite des 3 et on fait +1
		-> Si plusieurs solutions
			-> On choisit la solution la plus en haut
			-> Si plusieurs solutions
				-> On choisit la solution la plus a gauche
	-> Renvoie le meme tableau avec des 0 remplaces par des 2

- Affichage du/des resultats (Dans tous les cas on fait 1 par 1)
	-> Transformer chiffres en caractere (cf. structures)






------------- Structures -----------------
Map
	-> Tableau a 2 dimensions sur une seule ligne (tab[y*p + x])
	-> 0 = empty, 1 = obstacle, 2 = full

Structure elements
	-> empty = '.'
	-> obstacle = 'o'
	-> full = '#'



--------------- Return code -------------
parse()
=> 0, tout s'est bien passe, go analyser la map
=> 1, ALED Y'A UN SOUCIS ARRETE TOUT
=> 2, C'est jour de repos aujourd'hui, la map est deja pleine d'obstacles




------------- Parse line ---------------
Tranformer les caracteres en nombre
